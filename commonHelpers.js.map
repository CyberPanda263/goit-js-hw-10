{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst getDate = document.querySelector(\"#datetime-picker\");\nconst start = document.querySelector(\"button\");\n\nconst date = new Date();\nlet userSelectedDate;\nlet ms;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      console.log(selectedDates[0]);\n      userSelectedDate = selectedDates[0];\n      if(userSelectedDate < date) {\n        iziToast.show({\n          message: 'Please choose a date in the future',\n          position: 'topCenter',\n          backgroundColor: 'rgb(239, 64, 64)',\n          theme: 'dark',\n        });\n      }else{\n        start.disabled = false;\n        start.classList.remove('is-disable');\n      }\n    },\n  };\n\n  start.disabled = true;\n  start.classList = \"is-disable\";\n\n  function convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\nflatpickr(getDate, options);\n\nstart.addEventListener(\"click\", event => {\n    start.disabled = true;\n    start.classList = \"is-disable\";\n    getDate.disabled = true;\n    ms = userSelectedDate.getTime() - date.getTime();\n\n    const counting = setInterval(() => {\n      const getingTime = convertMs(ms);\n      Object.keys(getingTime).forEach(key => {\n          const lengh = getingTime[key];\n          document.querySelector(`[data-${key}`).innerHTML = lengh.toString().length != 2 ? `0${getingTime[key]}`: getingTime[key];\n      })\n      ms -= 1000;\n  }, 1000);\n  \n  setTimeout(() => {\n    clearInterval(counting);\n    start.disabled = false;\n    getDate.disabled = false;\n    start.classList.remove('is-disable');\n  }, ms + 1000);\n\n})\n  "],"names":["getDate","start","date","userSelectedDate","ms","options","selectedDates","iziToast","convertMs","days","hours","minutes","seconds","flatpickr","event","counting","getingTime","key","lengh"],"mappings":"+IAKA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAQ,SAAS,cAAc,QAAQ,EAEvCC,EAAO,IAAI,KACjB,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BH,EAAmBG,EAAc,CAAC,EAC/BH,EAAmBD,EACpBK,EAAS,KAAK,CACZ,QAAS,qCACT,SAAU,YACV,gBAAiB,mBACjB,MAAO,MACjB,CAAS,GAEDN,EAAM,SAAW,GACjBA,EAAM,UAAU,OAAO,YAAY,EAEtC,CACL,EAEEA,EAAM,SAAW,GACjBA,EAAM,UAAY,aAElB,SAASO,EAAUJ,EAAI,CAQrB,MAAMK,EAAO,KAAK,MAAML,EAAK,KAAG,EAE1BM,EAAQ,KAAK,MAAON,EAAK,MAAO,IAAI,EAEpCO,EAAU,KAAK,MAAQP,EAAK,MAAO,KAAQ,GAAM,EAEjDQ,EAAU,KAAK,MAASR,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAK,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAEHC,EAAUb,EAASK,CAAO,EAE1BJ,EAAM,iBAAiB,QAASa,GAAS,CACrCb,EAAM,SAAW,GACjBA,EAAM,UAAY,aAClBD,EAAQ,SAAW,GACnBI,EAAKD,EAAiB,QAAS,EAAGD,EAAK,QAAO,EAE9C,MAAMa,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAaR,EAAUJ,CAAE,EAC/B,OAAO,KAAKY,CAAU,EAAE,QAAQC,GAAO,CACnC,MAAMC,EAAQF,EAAWC,CAAG,EAC5B,SAAS,cAAc,SAASA,CAAG,EAAE,EAAE,UAAYC,EAAM,SAAQ,EAAG,QAAU,EAAI,IAAIF,EAAWC,CAAG,CAAC,GAAID,EAAWC,CAAG,CACjI,CAAO,EACDb,GAAM,GACT,EAAE,GAAI,EAEP,WAAW,IAAM,CACf,cAAcW,CAAQ,EACtBd,EAAM,SAAW,GACjBD,EAAQ,SAAW,GACnBC,EAAM,UAAU,OAAO,YAAY,CACvC,EAAKG,EAAK,GAAI,CAEd,CAAC"}